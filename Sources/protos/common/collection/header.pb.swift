// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/common/collection/header.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Rivuletkit_Common_Collection_Header {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This holds the LHS of the HTTP Header, e.g `Content-Type` or `X-Custom-Header`
  public var key: String = String()

  /// The value (or the RHS) of the Header is stored in this field.
  public var value: String = String()

  /// If set to true, the current header will not be sent with requests.
  public var disabled: Bool {
    get {return _disabled ?? false}
    set {_disabled = newValue}
  }
  /// Returns true if `disabled` has been explicitly set.
  public var hasDisabled: Bool {return self._disabled != nil}
  /// Clears the value of `disabled`. Subsequent reads from it will return its default value.
  public mutating func clearDisabled() {self._disabled = nil}

  public var descriotion: String {
    get {return _descriotion ?? String()}
    set {_descriotion = newValue}
  }
  /// Returns true if `descriotion` has been explicitly set.
  public var hasDescriotion: Bool {return self._descriotion != nil}
  /// Clears the value of `descriotion`. Subsequent reads from it will return its default value.
  public mutating func clearDescriotion() {self._descriotion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _disabled: Bool? = nil
  fileprivate var _descriotion: String? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Com_Rivuletkit_Common_Collection_Header: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.rivuletkit.common.collection"

extension Com_Rivuletkit_Common_Collection_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Header"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
    3: .same(proto: "disabled"),
    4: .same(proto: "descriotion"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._disabled) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._descriotion) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try { if let v = self._disabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._descriotion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Rivuletkit_Common_Collection_Header, rhs: Com_Rivuletkit_Common_Collection_Header) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs._disabled != rhs._disabled {return false}
    if lhs._descriotion != rhs._descriotion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

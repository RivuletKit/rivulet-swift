// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/common/collection/collection.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Com_Rivuletkit_Common_Collection_CollectionItemType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case item // = 0
  case folder // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .item
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .item
    case 1: self = .folder
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .item: return 0
    case .folder: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Com_Rivuletkit_Common_Collection_CollectionItemType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Com_Rivuletkit_Common_Collection_CollectionItemType] = [
    .item,
    .folder,
  ]
}

#endif  // swift(>=4.2)

public struct Com_Rivuletkit_Common_Collection_Collection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var info: Com_Rivuletkit_Common_Collection_CollectionInfo {
    get {return _storage._info ?? Com_Rivuletkit_Common_Collection_CollectionInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {_uniqueStorage()._info = nil}

  public var items: [Com_Rivuletkit_Common_Collection_CollectionItem] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  public var events: [Com_Rivuletkit_Common_Collection_CollectionEvent] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  public var variables: [Com_Rivuletkit_Common_Collection_Variable] {
    get {return _storage._variables}
    set {_uniqueStorage()._variables = newValue}
  }

  public var auth: Com_Rivuletkit_Common_Collection_Auth {
    get {return _storage._auth ?? Com_Rivuletkit_Common_Collection_Auth()}
    set {_uniqueStorage()._auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  public var hasAuth: Bool {return _storage._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  public mutating func clearAuth() {_uniqueStorage()._auth = nil}

  public var protocolProfileBehavior: Com_Rivuletkit_Common_Collection_ProtocolProfileBehavior {
    get {return _storage._protocolProfileBehavior ?? Com_Rivuletkit_Common_Collection_ProtocolProfileBehavior()}
    set {_uniqueStorage()._protocolProfileBehavior = newValue}
  }
  /// Returns true if `protocolProfileBehavior` has been explicitly set.
  public var hasProtocolProfileBehavior: Bool {return _storage._protocolProfileBehavior != nil}
  /// Clears the value of `protocolProfileBehavior`. Subsequent reads from it will return its default value.
  public mutating func clearProtocolProfileBehavior() {_uniqueStorage()._protocolProfileBehavior = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Rivuletkit_Common_Collection_CollectionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A collection's friendly name is defined by this field.
  public var name: String = String()

  /// since the verification integrity is not currently implemented, this parameter is temporarily set to optional.
  public var schema: String {
    get {return _schema ?? String()}
    set {_schema = newValue}
  }
  /// Returns true if `schema` has been explicitly set.
  public var hasSchema: Bool {return self._schema != nil}
  /// Clears the value of `schema`. Subsequent reads from it will return its default value.
  public mutating func clearSchema() {self._schema = nil}

  public var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  public var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  /// Every collection is identified by the unique value of this field.
  public var postmanID: String {
    get {return _postmanID ?? String()}
    set {_postmanID = newValue}
  }
  /// Returns true if `postmanID` has been explicitly set.
  public var hasPostmanID: Bool {return self._postmanID != nil}
  /// Clears the value of `postmanID`. Subsequent reads from it will return its default value.
  public mutating func clearPostmanID() {self._postmanID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _schema: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _version: String? = nil
  fileprivate var _postmanID: String? = nil
}

public struct Com_Rivuletkit_Common_Collection_CollectionItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// conmmon
  public var type: Com_Rivuletkit_Common_Collection_CollectionItemType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var events: [Com_Rivuletkit_Common_Collection_CollectionEvent] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  public var variables: [Com_Rivuletkit_Common_Collection_Variable] {
    get {return _storage._variables}
    set {_uniqueStorage()._variables = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var protocolProfileBehavior: Com_Rivuletkit_Common_Collection_ProtocolProfileBehavior {
    get {return _storage._protocolProfileBehavior ?? Com_Rivuletkit_Common_Collection_ProtocolProfileBehavior()}
    set {_uniqueStorage()._protocolProfileBehavior = newValue}
  }
  /// Returns true if `protocolProfileBehavior` has been explicitly set.
  public var hasProtocolProfileBehavior: Bool {return _storage._protocolProfileBehavior != nil}
  /// Clears the value of `protocolProfileBehavior`. Subsequent reads from it will return its default value.
  public mutating func clearProtocolProfileBehavior() {_uniqueStorage()._protocolProfileBehavior = nil}

  /// item
  public var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var request: Com_Rivuletkit_Common_Collection_Request {
    get {return _storage._request ?? Com_Rivuletkit_Common_Collection_Request()}
    set {_uniqueStorage()._request = newValue}
  }
  /// Returns true if `request` has been explicitly set.
  public var hasRequest: Bool {return _storage._request != nil}
  /// Clears the value of `request`. Subsequent reads from it will return its default value.
  public mutating func clearRequest() {_uniqueStorage()._request = nil}

  public var responses: Com_Rivuletkit_Common_Collection_Response {
    get {return _storage._responses ?? Com_Rivuletkit_Common_Collection_Response()}
    set {_uniqueStorage()._responses = newValue}
  }
  /// Returns true if `responses` has been explicitly set.
  public var hasResponses: Bool {return _storage._responses != nil}
  /// Clears the value of `responses`. Subsequent reads from it will return its default value.
  public mutating func clearResponses() {_uniqueStorage()._responses = nil}

  /// folder
  public var items: [Com_Rivuletkit_Common_Collection_CollectionItem] {
    get {return _storage._items}
    set {_uniqueStorage()._items = newValue}
  }

  public var auth: Com_Rivuletkit_Common_Collection_Auth {
    get {return _storage._auth ?? Com_Rivuletkit_Common_Collection_Auth()}
    set {_uniqueStorage()._auth = newValue}
  }
  /// Returns true if `auth` has been explicitly set.
  public var hasAuth: Bool {return _storage._auth != nil}
  /// Clears the value of `auth`. Subsequent reads from it will return its default value.
  public mutating func clearAuth() {_uniqueStorage()._auth = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Rivuletkit_Common_Collection_CollectionEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Can be set to `test` or `prerequest` for test scripts or pre-request scripts respectively.
  public var listen: String = String()

  /// A unique identifier for the enclosing event.
  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  /// optional Script script = 3; // reserved attributes, not implemented yet
  public var disabled: Bool {
    get {return _disabled ?? false}
    set {_disabled = newValue}
  }
  /// Returns true if `disabled` has been explicitly set.
  public var hasDisabled: Bool {return self._disabled != nil}
  /// Clears the value of `disabled`. Subsequent reads from it will return its default value.
  public mutating func clearDisabled() {self._disabled = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: String? = nil
  fileprivate var _disabled: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Com_Rivuletkit_Common_Collection_CollectionItemType: @unchecked Sendable {}
extension Com_Rivuletkit_Common_Collection_Collection: @unchecked Sendable {}
extension Com_Rivuletkit_Common_Collection_CollectionInfo: @unchecked Sendable {}
extension Com_Rivuletkit_Common_Collection_CollectionItem: @unchecked Sendable {}
extension Com_Rivuletkit_Common_Collection_CollectionEvent: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.rivuletkit.common.collection"

extension Com_Rivuletkit_Common_Collection_CollectionItemType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ITEM"),
    1: .same(proto: "FOLDER"),
  ]
}

extension Com_Rivuletkit_Common_Collection_Collection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Collection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "info"),
    2: .same(proto: "items"),
    3: .same(proto: "events"),
    4: .same(proto: "variables"),
    5: .same(proto: "auth"),
    6: .same(proto: "protocolProfileBehavior"),
  ]

  fileprivate class _StorageClass {
    var _info: Com_Rivuletkit_Common_Collection_CollectionInfo? = nil
    var _items: [Com_Rivuletkit_Common_Collection_CollectionItem] = []
    var _events: [Com_Rivuletkit_Common_Collection_CollectionEvent] = []
    var _variables: [Com_Rivuletkit_Common_Collection_Variable] = []
    var _auth: Com_Rivuletkit_Common_Collection_Auth? = nil
    var _protocolProfileBehavior: Com_Rivuletkit_Common_Collection_ProtocolProfileBehavior? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _info = source._info
      _items = source._items
      _events = source._events
      _variables = source._variables
      _auth = source._auth
      _protocolProfileBehavior = source._protocolProfileBehavior
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._info) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._items) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._events) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._variables) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._auth) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._protocolProfileBehavior) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 2)
      }
      if !_storage._events.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._events, fieldNumber: 3)
      }
      if !_storage._variables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._variables, fieldNumber: 4)
      }
      try { if let v = _storage._auth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._protocolProfileBehavior {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Rivuletkit_Common_Collection_Collection, rhs: Com_Rivuletkit_Common_Collection_Collection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._info != rhs_storage._info {return false}
        if _storage._items != rhs_storage._items {return false}
        if _storage._events != rhs_storage._events {return false}
        if _storage._variables != rhs_storage._variables {return false}
        if _storage._auth != rhs_storage._auth {return false}
        if _storage._protocolProfileBehavior != rhs_storage._protocolProfileBehavior {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Rivuletkit_Common_Collection_CollectionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "schema"),
    3: .same(proto: "description"),
    4: .same(proto: "version"),
    5: .standard(proto: "_postman_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._schema) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._version) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._postmanID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._schema {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._postmanID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Rivuletkit_Common_Collection_CollectionInfo, rhs: Com_Rivuletkit_Common_Collection_CollectionInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._schema != rhs._schema {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._version != rhs._version {return false}
    if lhs._postmanID != rhs._postmanID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Rivuletkit_Common_Collection_CollectionItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectionItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "events"),
    3: .same(proto: "variables"),
    4: .same(proto: "name"),
    5: .same(proto: "description"),
    6: .same(proto: "protocolProfileBehavior"),
    7: .same(proto: "id"),
    8: .same(proto: "request"),
    9: .same(proto: "responses"),
    10: .same(proto: "items"),
    11: .same(proto: "auth"),
  ]

  fileprivate class _StorageClass {
    var _type: Com_Rivuletkit_Common_Collection_CollectionItemType = .item
    var _events: [Com_Rivuletkit_Common_Collection_CollectionEvent] = []
    var _variables: [Com_Rivuletkit_Common_Collection_Variable] = []
    var _name: String? = nil
    var _description_p: String? = nil
    var _protocolProfileBehavior: Com_Rivuletkit_Common_Collection_ProtocolProfileBehavior? = nil
    var _id: String? = nil
    var _request: Com_Rivuletkit_Common_Collection_Request? = nil
    var _responses: Com_Rivuletkit_Common_Collection_Response? = nil
    var _items: [Com_Rivuletkit_Common_Collection_CollectionItem] = []
    var _auth: Com_Rivuletkit_Common_Collection_Auth? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _events = source._events
      _variables = source._variables
      _name = source._name
      _description_p = source._description_p
      _protocolProfileBehavior = source._protocolProfileBehavior
      _id = source._id
      _request = source._request
      _responses = source._responses
      _items = source._items
      _auth = source._auth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._events) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._variables) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._protocolProfileBehavior) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._request) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._responses) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._items) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._auth) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._type != .item {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._events.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._events, fieldNumber: 2)
      }
      if !_storage._variables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._variables, fieldNumber: 3)
      }
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._protocolProfileBehavior {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._responses {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._items.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._items, fieldNumber: 10)
      }
      try { if let v = _storage._auth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Rivuletkit_Common_Collection_CollectionItem, rhs: Com_Rivuletkit_Common_Collection_CollectionItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._events != rhs_storage._events {return false}
        if _storage._variables != rhs_storage._variables {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._protocolProfileBehavior != rhs_storage._protocolProfileBehavior {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._request != rhs_storage._request {return false}
        if _storage._responses != rhs_storage._responses {return false}
        if _storage._items != rhs_storage._items {return false}
        if _storage._auth != rhs_storage._auth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Rivuletkit_Common_Collection_CollectionEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectionEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "listen"),
    2: .same(proto: "id"),
    4: .same(proto: "disabled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.listen) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._disabled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.listen.isEmpty {
      try visitor.visitSingularStringField(value: self.listen, fieldNumber: 1)
    }
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._disabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Com_Rivuletkit_Common_Collection_CollectionEvent, rhs: Com_Rivuletkit_Common_Collection_CollectionEvent) -> Bool {
    if lhs.listen != rhs.listen {return false}
    if lhs._id != rhs._id {return false}
    if lhs._disabled != rhs._disabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
